{:rename-macros {}, :renames {}, :use-macros {}, :excludes nil, :name future-app.db, :imports nil, :requires {s cljs.spec, cljs.spec cljs.spec, clojure.spec cljs.spec}, :uses nil, :defs {app-db {:name future-app.db/app-db, :file "C:\\msys64\\home\\geezer\\projects\\future-app\\src\\future_app\\db.cljs", :line 10, :column 1, :end-line 10, :end-column 12, :meta {:file "C:\\msys64\\home\\geezer\\projects\\future-app\\src\\future_app\\db.cljs", :line 10, :column 6, :end-line 10, :end-column 12}}}, :require-macros {s cljs.spec, cljs.spec cljs.spec, clojure.spec cljs.spec}, :cljs.analyzer/constants {:seen #{:req-un :opt-un cljs.spec/keys :gfn :future-app.db/greeting :pred-exprs :opt-keys :future-app.db/app-db cljs.core/string? :req-specs cljs.core/contains? cljs.core/map? % :req :req-keys cljs.core/fn :opt-specs :pred-forms :greeting :opt}, :order [:future-app.db/greeting cljs.core/string? :future-app.db/app-db cljs.spec/keys :req-un :opt-un :gfn :pred-exprs :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms :opt :greeting cljs.core/map? cljs.core/fn % cljs.core/contains?]}, :doc nil}