{:rename-macros {}, :renames {}, :use-macros {}, :excludes nil, :name future-app.events, :imports nil, :requires {re-frame.core re-frame.core, s cljs.spec, cljs.spec cljs.spec, clojure.spec cljs.spec, db future-app.db, future-app.db future-app.db}, :uses {app-db future-app.db, reg-event-db re-frame.core, after re-frame.core}, :defs {check-and-throw {:protocol-inline nil, :meta {:file "C:\\msys64\\home\\geezer\\projects\\future-app\\src\\future_app\\events.cljs", :line 11, :column 7, :end-line 11, :end-column 22, :arglists (quote ([spec db [event]])), :doc "Throw an exception if db doesn't have a valid spec."}, :name future-app.events/check-and-throw, :variadic false, :file "C:\\msys64\\home\\geezer\\projects\\future-app\\src\\future_app\\events.cljs", :end-column 22, :method-params ([spec db p__50109]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([spec db [event]])), :doc "Throw an exception if db doesn't have a valid spec."}, validate-spec {:name future-app.events/validate-spec, :file "C:\\msys64\\home\\geezer\\projects\\future-app\\src\\future_app\\events.cljs", :line 18, :column 1, :end-line 18, :end-column 19, :meta {:file "C:\\msys64\\home\\geezer\\projects\\future-app\\src\\future_app\\events.cljs", :line 18, :column 6, :end-line 18, :end-column 19}}}, :require-macros {s cljs.spec, cljs.spec cljs.spec, clojure.spec cljs.spec}, :cljs.analyzer/constants {:seen #{:initialize-db :set-greeting :future-app.db/app-db :greeting}, :order [:future-app.db/app-db :initialize-db :set-greeting :greeting]}, :doc nil}